// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from "@hey-api/client-fetch";
import type {
  PostRegisterData,
  PostRegisterError,
  PostLoginData,
  PostLoginResponse,
  PostRefreshData,
  PostRefreshResponse,
  MapIdentityApiConfirmEmailData,
  PostResendConfirmationEmailData,
  PostForgotPasswordData,
  PostForgotPasswordError,
  PostResetPasswordData,
  PostResetPasswordError,
  PostManage2FaData,
  PostManage2FaResponse,
  PostManage2FaError,
  GetManageInfoData,
  GetManageInfoResponse,
  GetManageInfoError,
  PostManageInfoData,
  PostManageInfoResponse,
  PostManageInfoError,
  PostLogoutData,
  PostOAuthGoogleCallbackData,
  GetWeatherForecastData,
  GetWeatherForecastResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
};

export const postRegister = <ThrowOnError extends boolean = false>(
  options: Options<PostRegisterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    PostRegisterError,
    ThrowOnError
  >({
    url: "/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postLogin = <ThrowOnError extends boolean = false>(
  options: Options<PostLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostLoginResponse,
    unknown,
    ThrowOnError
  >({
    url: "/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postRefresh = <ThrowOnError extends boolean = false>(
  options: Options<PostRefreshData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostRefreshResponse,
    unknown,
    ThrowOnError
  >({
    url: "/refresh",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const mapIdentityApiConfirmEmail = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MapIdentityApiConfirmEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: "/confirmEmail",
    ...options,
  });
};

export const postResendConfirmationEmail = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostResendConfirmationEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      url: "/resendConfirmationEmail",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    },
  );
};

export const postForgotPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostForgotPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    PostForgotPasswordError,
    ThrowOnError
  >({
    url: "/forgotPassword",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostResetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    PostResetPasswordError,
    ThrowOnError
  >({
    url: "/resetPassword",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postManage2Fa = <ThrowOnError extends boolean = false>(
  options: Options<PostManage2FaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostManage2FaResponse,
    PostManage2FaError,
    ThrowOnError
  >({
    url: "/manage/2fa",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getManageInfo = <ThrowOnError extends boolean = false>(
  options?: Options<GetManageInfoData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetManageInfoResponse,
    GetManageInfoError,
    ThrowOnError
  >({
    url: "/manage/info",
    ...options,
  });
};

export const postManageInfo = <ThrowOnError extends boolean = false>(
  options: Options<PostManageInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostManageInfoResponse,
    PostManageInfoError,
    ThrowOnError
  >({
    url: "/manage/info",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postLogout = <ThrowOnError extends boolean = false>(
  options?: Options<PostLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: "/logout",
    ...options,
  });
};

export const postOAuthGoogleCallback = <ThrowOnError extends boolean = false>(
  options: Options<PostOAuthGoogleCallbackData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/OAuth/GoogleCallback",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

export const getWeatherForecast = <ThrowOnError extends boolean = false>(
  options?: Options<GetWeatherForecastData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetWeatherForecastResponse,
    unknown,
    ThrowOnError
  >({
    url: "/WeatherForecast",
    ...options,
  });
};
